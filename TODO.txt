   TODO:
   https://blog.sessionstack.com/how-javascript-works-the-different-ways-of-declaring-a-function-5-best-practices-8a0324c06fe2
   make sure to recurse on if a function is invokable (); - do this at the end of each function... make sure the function can be invoked beforehand with a parameter
   add other languages (below iterate_through_file_text) also add languages as a configuration property to skip over files
   make sure to use regular expressions instead of many !== in some files... many !== isnt accurate
   add an exported updated data for every new file to avoid passing
   possibly use a library for checking syntax errors or some web browser, use the window function to get errors in the document and move next.. eslint or something
   make sure to add if a regular name in arrow function in case there are no parameters - const wow = jkj => { }
   add a start and stop index when pushing scripts if necessary
   for the lex, determine with an equals sign at the top making sure not in anything else... backtrack, get name and type... then continue... ... functions will be added in their own thing and additional parameters for strings and lex will be figured out.

   
   1. template 
   2. regex 
   3. regular beginning
   4. regular body
   5. arrow beginning 
   6. arrow body 

   done 
   
   backtracking
   the only thing to check for is an equals sign in the backtracking set... when an equals sign is found, you know the function has a name and possibly a type. 
   this should be able to determine when to end. ending is based on = ...no need to count parentheses. you can do this for every function