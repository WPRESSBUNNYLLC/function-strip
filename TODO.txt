   TODO:
   https://blog.sessionstack.com/how-javascript-works-the-different-ways-of-declaring-a-function-5-best-practices-8a0324c06fe2
   make sure to recurse on if a function is invokable (); - do this at the end after push function
   check for escaped strings - check and comments if comments can be escaped. not sure
   add in additional characters in addition to new line and " " if necessary. i dont think it is
   add when in and out of a regular expression outside a string for counting/entering and inside a string for counting .... console.log(`The value of lastIndex is ${/d(b+```)d/g.lastIndex}`); vs const re = /^(?:\d{3}|\(\d{3}\))([-/.])\d{3}\1\d{4}$/; ...
   take regular expressions outside and indide into consideration and template literals for counting
   make file types a wrapper condition. 
   add files for exiting
   add an updater for whether or not to pass in data if its the same file... just so the entire data isnt passed more than once
   make sure indexes are set correclty
   possibly use a library for checking syntax errors or some web browser, use the window function to get errors in the document and move next.. eslint or somethings
   parameter boundries still need to be set within each function... or just checks for counting real whatevers.... this is the shares recursive exit
   dont need to recurse on <script> ...so i can delete those files i guess just need <script then </script and canuse the regular strings and all that jazz in the body

   when i go into a function, every consditional variable for outside the function should already be reset.
   when i leave a function, every consditional variable for inside the function should be reset


   backtracking
   the only thing to check for is an equals sign in the backtracking set... when an equals sign is found, you know the function has a name and possibly a type. 
   this should be able to determine when to end. ending is based on = ...no need to count parentheses. you can do this for every function