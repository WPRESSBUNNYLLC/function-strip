 
  //organize this bottom part possibly into seperate files... or just one folder per file/s

//   if(
//    check_beginning_regular() &&
//    data.charAt(data_index  ) === 'f' && 
//    data.charAt(data_index+1) === 'u' &&  
//    data.charAt(data_index+2) === 'n' && 
//    data.charAt(data_index+3) === 'c' && 
//    data.charAt(data_index+4) === 't' && 
//    data.charAt(data_index+5) === 'i' && 
//    data.charAt(data_index+6) === 'o' && 
//    data.charAt(data_index+7) === 'n' && 
//    check_ending_regular() &&
//    in_function === false && 
//    function_types.regular === true
//   ) {
//    in_function = true;
//    is_arrow = false;
//    function_line_number = line_number;
//    build_string = initiate_regular(data, data_index) + " function"; 
//    data_index = data_index + 8; 
//    //possibly call a build regular function in here and pass back the data index when complete
//    return iterate_through_file_text(data_index);
//   }
 
//   if(
//    check_beginning_arrow() && 
//    data.charAt(data_index  ) ===  '=' && 
//    data.charAt(data_index+1) ===  '>' && 
//    check_ending_arrow() &&
//    in_function === false && 
//    function_types.arrow === true
//   ) {
//    in_function = true;
//    function_line_number = line_number;
//    is_arrow = true;
//    build_string = initiate_arrow(data, data_index, arrow_index_parameter_boundries) + " =>";
//    arrow_index_parameter_boundries = []; //only used here
//    data_index = data_index + 2;
//    //possibly call a build arrow in here and pass the data index here
//    return iterate_through_file_text(data_index);
//   }
 
//   /*
//    if in a function and a bracket..when in the above things, i avoid counting bad brackets --- maybe make all these bottom parts into their own seperate files... ..which would be backtracking beginning first then building the function secoond
//   */
 
//   if(
//    data.charAt(data_index) === '{' && 
//    in_function === true
//   ) {
//    opening_bracket = opening_bracket + 1; 
//    has_bracket = true; //has bracket needs to be noted above too or not
//    build_string += data.charAt(data_index);
//    data_index = data_index + 1;
//    return iterate_through_file_text(data_index);
//   } 
 
//   /*
//    if not in a comment or string, keeping count of ending bracket to know when to end the function
//   */
  
//   if(
//    data.charAt(data_index) === '}' && 
//    in_function === true
//   ) {
//    closing_bracket = closing_bracket + 1;
//    build_string += data.charAt(data_index);
//    data_index = data_index + 1;
//    return iterate_through_file_text(data_index);
//   }
 
//   /* 
//    end creating the function.. this condition should hit one time then going out of the function.
//   */
 
//   if(
//    ((is_arrow === true && has_bracket === false && data.charAt(data_index) === '\n') || //is arrow and has bracket needs to be checked above
//    (opening_bracket === closing_bracket && opening_bracket > 0)) && 
//    in_function === true
//   ) { 
//    push_function();
//    function_index = function_index + 1;
//    build_string = '';
//    has_bracket = false;
//    in_function = false;
//    opening_bracket = 0; 
//    closing_bracket = 0;
//    data_index = data_index + 1;
//    return iterate_through_file_text(data_index);
//   }
 
//   /* 
//    pushing every character when in the function... the build string is also in the other files copied over.... if not in the function, just moving next
//   */
  
//   if(in_function === true) { 
//    build_string += data.charAt(data_index);
//    data_index = data_index + 1;
//    return iterate_through_file_text(data_index);
//   } else { 
//    data_index = data_index + 1;
//    return iterate_through_file_text(data_index);
//   }


 /*
  CHECK BEGINNING and ending of funtions
 */
 
//  function check_beginning_regular() { 
//   if((data.charAt(data_index-1) === '\n' || data.charAt(data_index-1) === ' ' || data.charAt(data_index-1) === ',' || data.charAt(data_index-1) === ':') || ((data.charAt(data_index-1) === '=' || data.charAt(data_index-1) === '(' || data.charAt(data_index-1) === '+' || data.charAt(data_index-1) === '-' || data.charAt(data_index-1) === '~' || data.charAt(data_index-1) === '!') && (data.charAt(data_index-2) === ' ' || data.charAt(data_index-2) === '\n' || data.charAt(data_index-2) === ',' || data.charAt(data_index-2) === ':'))) {
//     return true
//   } else { 
//     return false
//   }
//  }

//  function check_ending_regular() { 
//   if((data.charAt(data_index+8) === '\n' || data.charAt(data_index+8) === ' ' || data.charAt(data_index+8) === '(')) { 
//    return true
//   } else { 
//    return false
//   }
//  }

// function check_beginning_arrow() { 
//   if(data.charAt(data_index-1) === '\n' || data.charAt(data_index-1) === ' ' || data.charAt(data_index-1) === ')') { 
//    return true
//   } else { 
//    return false
//   }
//  }

// function check_ending_arrow() { 
//   if(data.charAt(data_index+2) === '\n' || data.charAt(data_index+2) === ' ' || data.charAt(data_index+2) === '{') { 
//    return true
//   } else { 
//    return false
//   }
//  }
 
 /*
  PUSH THE FUNCTION ----------------------------------------------------- make this an array of objects with has_name etc
 */
 
//  function push_function() {
//   exported_functions.push({ 
//     index: function_index, 
//     filepath: fp, 
//     line_number: function_line_number + 1,
//     function_: build_string, 
//     is_async: false, 
//     has_name: false, 
//     parameters: 'going to add this in'
//   });
//  }